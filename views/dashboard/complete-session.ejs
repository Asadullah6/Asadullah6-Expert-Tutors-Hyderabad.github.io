<%- include('../partials/header') -%>

<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    color: #333;
  }

  .container {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem 1.5rem;
  }

  .page-header {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 20px;
    padding: 2rem;
    margin-bottom: 2rem;
    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    text-align: center;
  }

  .page-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: #333;
    margin-bottom: 0.5rem;
    background: linear-gradient(135deg, #28a745, #20c997);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .page-subtitle {
    color: #666;
    font-size: 1.1rem;
  }

  .session-info {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 20px;
    padding: 2rem;
    margin-bottom: 2rem;
    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
  }

  .info-title {
    font-size: 1.3rem;
    font-weight: 600;
    color: #333;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .info-item {
    display: flex;
    align-items: center;
    gap: 0.8rem;
    padding: 1rem;
    background: rgba(40, 167, 69, 0.05);
    border-radius: 12px;
    border: 1px solid rgba(40, 167, 69, 0.1);
  }

  .info-icon {
    width: 36px;
    height: 36px;
    background: linear-gradient(135deg, #28a745, #20c997);
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 0.9rem;
  }

  .info-content {
    flex: 1;
  }

  .info-label {
    font-size: 0.8rem;
    color: #666;
    font-weight: 500;
    margin-bottom: 0.2rem;
  }

  .info-value {
    font-weight: 600;
    color: #333;
  }

  .completion-form {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 20px;
    padding: 2rem;
    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
  }

  .form-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: #333;
    margin-bottom: 1.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-label {
    display: block;
    font-weight: 600;
    color: #333;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
  }

  .form-input {
    width: 100%;
    padding: 1rem;
    border: 2px solid #e0e0e0;
    border-radius: 12px;
    font-size: 1rem;
    background: rgba(255, 255, 255, 0.8);
    transition: all 0.3s ease;
  }

  .form-input:focus {
    outline: none;
    border-color: #28a745;
    box-shadow: 0 0 0 4px rgba(40, 167, 69, 0.1);
  }

  .form-textarea {
    min-height: 120px;
    resize: vertical;
    font-family: inherit;
  }

  .form-row {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 1rem;
  }

  .form-select {
    appearance: none;
    background-image: url('data:image/svg+xml;charset=US-ASCII,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 4 5"><path fill="%23666" d="M2 0L0 2h4zm0 5L0 3h4z"/></svg>');
    background-repeat: no-repeat;
    background-position: right 1rem center;
    background-size: 12px;
    padding-right: 3rem;
  }

  .form-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
    margin-top: 2rem;
    padding-top: 1rem;
    border-top: 1px solid #f0f0f0;
  }

  .btn {
    padding: 1rem 2rem;
    border: none;
    border-radius: 50px;
    font-weight: 600;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1rem;
  }

  .btn-primary {
    background: linear-gradient(135deg, #28a745, #20c997);
    color: white;
    box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(40, 167, 69, 0.4);
  }

  .btn-secondary {
    background: linear-gradient(135deg, #6c757d, #5a6268);
    color: white;
    box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);
  }

  .btn-secondary:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(108, 117, 125, 0.4);
  }

  .alert {
    padding: 1rem;
    border-radius: 12px;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .alert-success {
    background: rgba(40, 167, 69, 0.1);
    border: 1px solid rgba(40, 167, 69, 0.3);
    color: #155724;
  }

  .completion-checklist {
    background: rgba(40, 167, 69, 0.05);
    border: 1px solid rgba(40, 167, 69, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
  }

  .checklist-title {
    font-weight: 600;
    color: #333;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .checklist-item {
    display: flex;
    align-items: center;
    gap: 0.8rem;
    margin-bottom: 0.8rem;
    padding: 0.5rem;
    border-radius: 8px;
    transition: background-color 0.2s ease;
  }

  .checklist-item:hover {
    background: rgba(40, 167, 69, 0.1);
  }

  .checklist-checkbox {
    width: 20px;
    height: 20px;
    border-radius: 4px;
    border: 2px solid #28a745;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #28a745;
    font-weight: 700;
    cursor: pointer;
  }

  @media (max-width: 768px) {
    .container {
      padding: 1rem;
    }
    
    .page-header {
      padding: 1.5rem;
    }
    
    .page-title {
      font-size: 2rem;
    }
    
    .form-row {
      grid-template-columns: 1fr;
    }
    
    .form-actions {
      flex-direction: column;
    }
  }
</style>

<div class="container">
  <div class="page-header">
    <h1 class="page-title">Complete Session</h1>
    <p class="page-subtitle">Mark this tutoring session as completed and add session notes</p>
  </div>

  <div class="session-info">
    <h2 class="info-title">
      üìã Session Details
    </h2>
    <div class="info-grid">
      <div class="info-item">
        <div class="info-icon">üë§</div>
        <div class="info-content">
          <div class="info-label">Student</div>
          <div class="info-value"><%= session.student?.name || session.studentName || 'Unknown' %></div>
        </div>
      </div>
      
      <div class="info-item">
        <div class="info-icon">üìö</div>
        <div class="info-content">
          <div class="info-label">Subject</div>
          <div class="info-value"><%= session.subject || 'Not specified' %></div>
        </div>
      </div>
      
      <div class="info-item">
        <div class="info-icon">üìÖ</div>
        <div class="info-content">
          <div class="info-label">Session Date</div>
          <div class="info-value"><%= session.date || 'TBD' %></div>
        </div>
      </div>
      
      <div class="info-item">
        <div class="info-icon">üïê</div>
        <div class="info-content">
          <div class="info-label">Session Time</div>
          <div class="info-value"><%= session.time || 'TBD' %></div>
        </div>
      </div>
    </div>
  </div>

  <div class="completion-form">
    <h2 class="form-title">
      ‚úÖ Session Completion Details
    </h2>
    
    <div class="alert alert-success">
      üéâ Great job! You're about to mark this session as completed. This will notify the student and update your teaching records.
    </div>

    <div class="completion-checklist">
      <div class="checklist-title">
        üìù Session Checklist
      </div>
      <div class="checklist-item">
        <div class="checklist-checkbox">‚úì</div>
        <span>Session was conducted successfully</span>
      </div>
      <div class="checklist-item">
        <div class="checklist-checkbox">‚úì</div>
        <span>Student attended the full session</span>
      </div>
      <div class="checklist-item">
        <div class="checklist-checkbox">‚úì</div>
        <span>Learning objectives were addressed</span>
      </div>
      <div class="checklist-item">
        <div class="checklist-checkbox">‚úì</div>
        <span>Student questions were answered</span>
      </div>
    </div>

    <form method="POST" action="/session/complete/<%= session._id %>">
      <div class="form-row">
        <div class="form-group">
          <label for="topics_covered" class="form-label">Topics Covered</label>
          <input 
            type="text" 
            id="topics_covered" 
            name="topics_covered" 
            class="form-input"
            placeholder="e.g., Python loops, functions, debugging"
            required
          />
        </div>
        
        <div class="form-group">
          <label for="duration" class="form-label">Session Duration</label>
          <select id="duration" name="duration" class="form-input form-select" required>
            <option value="">Select duration</option>
            <option value="30">30 minutes</option>
            <option value="45">45 minutes</option>
            <option value="60">1 hour</option>
            <option value="90">1.5 hours</option>
            <option value="120">2 hours</option>
            <option value="custom">Other</option>
          </select>
        </div>
      </div>
      
      <div class="form-group">
        <label for="notes" class="form-label">Session Notes & Feedback</label>
        <textarea 
          id="notes" 
          name="notes" 
          class="form-input form-textarea"
          placeholder="Describe what was covered in the session, student's progress, areas for improvement, and any homework or follow-up recommendations..."
          required
        ></textarea>
      </div>
      
      <div class="form-group">
        <label for="homework" class="form-label">Homework/Next Steps (Optional)</label>
        <textarea 
          id="homework" 
          name="homework" 
          class="form-input form-textarea"
          placeholder="Any assignments, practice problems, or recommendations for the student to work on before the next session..."
          style="min-height: 80px;"
        ></textarea>
      </div>
      
      <div class="form-actions">
        <a href="/my-bookings" class="btn btn-secondary">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"/>
          </svg>
          Cancel
        </a>
        
        <button type="submit" class="btn btn-primary">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
            <path d="M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.061L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z"/>
          </svg>
          Complete Session
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  // Handle custom duration input
  document.getElementById('duration').addEventListener('change', function() {
    if (this.value === 'custom') {
      const customDuration = prompt('Enter session duration in minutes:');
      if (customDuration && !isNaN(customDuration)) {
        // Create a new option for the custom duration
        const option = new Option(customDuration + ' minutes', customDuration);
        this.appendChild(option);
        this.value = customDuration;
      } else {
        this.value = '';
      }
    }
  });

  // Form validation
  document.querySelector('form').addEventListener('submit', function(e) {
    const topics = document.getElementById('topics_covered').value.trim();
    const duration = document.getElementById('duration').value;
    const notes = document.getElementById('notes').value.trim();
    
    if (!topics || !duration || !notes) {
      e.preventDefault();
      alert('Please fill in all required fields (Topics Covered, Duration, and Session Notes).');
      return;
    }
    
    if (notes.length < 10) {
      e.preventDefault();
      alert('Please provide more detailed session notes (at least 10 characters).');
      return;
    }
    
    // Confirm completion
    if (!confirm('Are you sure you want to mark this session as completed? This action cannot be undone and the student will be notified.')) {
      e.preventDefault();
    }
  });

  // Auto-save notes to localStorage while typing
  const notesTextarea = document.getElementById('notes');
  const sessionId = '<%= session._id %>';
  
  // Load saved notes
  const savedNotes = localStorage.getItem('session_notes_' + sessionId);
  if (savedNotes && !notesTextarea.value) {
    notesTextarea.value = savedNotes;
  }
  
  // Save notes as user types
  notesTextarea.addEventListener('input', function() {
    localStorage.setItem('session_notes_' + sessionId, this.value);
  });
  
  // Clear saved notes on successful submission
  document.querySelector('form').addEventListener('submit', function() {
    localStorage.removeItem('session_notes_' + sessionId);
  });
</script>

<%- include('../partials/footer') -%>